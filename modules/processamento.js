// processamento.js (Processa cada aluno)
import {
  inserirCPF,
  inserirCNAE,
  inserirMensagem,
  inserirValor,
  inserirDataEmissao,
  selecionarTipoPessoa,
  clicarSalvarNota,
  clicarAdicionarItem,
} from "./aluno.js";
import { logger } from "../modules/logger.js";
import { registrarInformacoesNota } from "./notaEmitida.js";
import { atualizarAlunoNaPlanilha } from "./planilha.js";

// üß† Fun√ß√£o principal que processa um aluno e tenta emitir a NFS-e
export async function processarAluno(page, aluno, index, alunos) {
  logger.info(
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  );
  logger.info(`üë§ Aluno(a) selecionado(a): ${aluno.ALUNO}`);

  try {
    // üóìÔ∏è Insere a data de emiss√£o (autom√°tico)
    await inserirDataEmissao(page);

    // üë§ Define como pessoa f√≠sica (ou jur√≠dica se alterado no futuro)
    await selecionarTipoPessoa(page);

    // üßæ Insere o CPF do aluno
    // >>> Mudan√ßa m√≠nima: se falhar (ap√≥s as tentativas internas), apenas pula o aluno <<<
    try {
      await inserirCPF(page, aluno.CPF);
    } catch (err) {
      return false; // N√ÉO lan√ßa ‚Äî permite o loop continuar para o pr√≥ximo aluno
    }

    // üíº Seleciona o c√≥digo CNAE (fixo no sistema atual)
    await inserirCNAE(page);

    // üìù Escreve a mensagem de descri√ß√£o da nota com curso e compet√™ncia
    await inserirMensagem(page, aluno);

    // üí∞ Insere o valor da nota e valida se √© aceit√°vel
    const valorOK = await inserirValor(page, aluno);
    if (!valorOK) {
      logger.warn(
        `‚è≠Ô∏è Nota N√ÉO emitida para ${aluno.ALUNO} devido a valor inv√°lido ou zerado.`
      );
      return false; // Impede avan√ßo no processamento, mas N√ÉO derruba a automa√ß√£o
    }

    // ‚ûï Adiciona o item e salva a nota
    await clicarAdicionarItem(page);
    await clicarSalvarNota(page);

    // üßæ Captura os dados da nota emitida (se poss√≠vel)
    const notaEmitida = await registrarInformacoesNota(page);

    if (notaEmitida) {
      // Atualiza a planilha com status "SIM"
      atualizarAlunoNaPlanilha(alunos, index);

      // Guarda o √∫ltimo aluno marcado com sucesso, para garantir que seja salvo se o usu√°rio interromper
      global.ultimoProcessado = { alunos, index };
    } else {
      logger.warn(
        `‚ö†Ô∏è Nota aparentemente n√£o foi emitida corretamente para ${aluno.ALUNO}, n√£o marcando como processado.`
      );
    }

    logger.info("‚úÖ Processamento do aluno conclu√≠do!");
    return true; // Tudo OK
  } catch (error) {
    // >>> Mudan√ßa m√≠nima: se o erro for o de CPF, n√£o derruba; caso contr√°rio, mant√©m comportamento original <<<
    const msg = error?.message?.toLowerCase?.() || "";
    const ehFalhaCPF =
      msg.includes("falha ao inserir cpf") || msg.includes("cpf");

    if (ehFalhaCPF) {
      logger.warn(
        `‚è≠Ô∏è Falha de CPF tratada para "${aluno.ALUNO}". Pulando aluno.`
      );
      return false; // N√ÉO derruba a automa√ß√£o
    }

    logger.error(`‚ùå Erro ao processar ${aluno.ALUNO}: ${error.message}`);
    throw error; // mant√©m fatal para outros tipos de erro
  }
}
